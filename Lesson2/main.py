# """
# Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя,
# а указать явно, в программе.
# """
#
# lst = [12, None, -77, 'True', True, 9.5, "Hello"]
#
#
# def my_type(my_lst):
#     for el in range(len(my_lst)):
#         print(type(my_lst[el]))
#
#
# my_type(lst)

# """
# Для списка реализовать обмен значений соседних элементов, т.е.
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить
# на своем месте.
# Для заполнения списка элементов необходимо использовать
# функцию input().
# """
# el_count = int(input("Введите количество элементов списка "))
# lst = []
# i = 0
# el = 0
# while i < el_count:
#     lst.append(input("Введите следующее значение списка "))
#     i += 1
#
# for elem in range(int(len(lst) / 2)):
#     lst[el], lst[el + 1] = lst[el + 1], lst[el]
#     el += 2
# print(lst)

# """
# Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить к какому времени года относится месяц (зима, весна,
# лето, осень).
# Напишите решения через list и через dict.
# """
# seasons_list = ["Winter", "Spring", 'summer', 'autumn']
# seasons_dict = {1: 'winter', 2: 'spring', 3: 'summer', 4: 'autumn'}
# month = int(input("Введите месяц по номеру "))
# if month == 1 or month == 12 or month == 2:
#     print(seasons_dict.get(1))
#     print(seasons_list[0])
# elif month == 3 or month == 4 or month == 5:
#     print(seasons_dict.get(2))
#     print(seasons_list[1])
# elif month == 6 or month == 7 or month == 8:
#     print(seasons_dict.get(3))
#     print(seasons_list[2])
#
# elif month == 9 or month == 10 or month == 11:
#     print(seasons_dict.get(4))
#     print(seasons_list[3])
# else:
#     print("Такого месяца не существует")

# """
# Пользователь вводит строку из нескольких слов, разделённых
# пробелами. Вывести каждое слово с новой строки.
# Строки необходимо пронумеровать. Если в слово длинное,
# выводить только первые 10 букв в слове.
# """
#
# my_str = input("введите строку ")
# words = my_str.split()
# for i, el in enumerate(words):
#     print(f"{i+1}. {el [0:10]}")

# """
# Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться
# после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде,
# например, my_list = [7, 5, 3, 3, 2].
# """
# my_list = [7, 5, 3, 3, 2]
# print(f"Рейтинг - {my_list}")
# digit = int(input("Введите число: "))
# for el in range(len(my_list)):
#     if my_list[el] == digit:
#         my_list.insert(el + 1, digit)
#         break
#     elif my_list[0] < digit:
#         my_list.insert(0, digit)
#     elif my_list[-1] > digit:
#         my_list.append(digit)
#     elif my_list[el] > digit > my_list[el + 1]:
#         my_list.insert(el + 1, digit)
# print(f"Результат: {my_list}")

"""
Реализовать структуру данных «Товары». Она должна представлять
собой список кортежей. Каждый кортеж хранит информацию об
отдельном товаре. В кортеже должно быть два элемента —
номер товара и словарь с параметрами (характеристиками товара:
название, цена, количество, единица измерения).
Структуру нужно сформировать программно, т.е.
запрашивать все данные у пользователя.
Пример готовой структуры:
[
    (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
    (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
    (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
]
Необходимо собрать аналитику о товарах. Реализовать словарь,
в котором каждый ключ — характеристика товара,
например название, а значение — список значений-характеристик,
например список названий товаров.
Пример:
{
    “название”: [“компьютер”, “принтер”, “сканер”],
    “цена”: [20000, 6000, 2000],
    “количество”: [5, 2, 7],
    “ед”: [“шт.”]
}
"""

goods = int(input("Введите количество товаров в структуре "))
n = 1
my_dict = []
my_list = []

while n <= goods:
    my_dict = dict({'название': input("введите название "), 'цена': input("Введите цену "),
                    'количество': input('Введите количество '), 'eд': input("Введите единицу измерения ")})
    my_list.append((n, my_dict))
    n += 1

for i in my_list:
    print(f"{i},")

# goods = []
# features = {'name': '', 'price': '', 'quantity': '', 'unit': ''}
# analytics = {'name': [], 'price': [], 'quantity': [], 'unit': []}
# num = 0
# feature_ = None
# control = None
# while True:
#     control = input("For quit press 'Q', for continue press 'Enter', for analytics press 'A'").upper()
#     if control == 'Q':
#         break
#     num += 1
#     if control == 'A':
#         print(f'\n Current analytics \n {"=" * 20}')
#         for key, value in analytics.items():
#             print(f'{key[:25]:>30}: {value}')
#             print("=" * 20)
#     for f in features.keys():
#         feature_ = input(f'Input feature "{f}"')
#         features[f] = int(feature_) if (f == 'price' or f == 'quantity') else feature_
#         analytics[f].append(features[f])
#     goods.append((num, features))
